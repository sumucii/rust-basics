fn main() {
    //闭包是一个可以捕获环境中变量的匿名函数
    //闭包的语法类似于函数，但是使用 || 符号来定义参数和函数体
    //闭包可以捕获环境中的变量，这使得闭包非常灵活
    //闭包的类型是一个实现了Fn、FnMut或FnOnce trait的结构体
    //闭包的类型取决于闭包的参数和返回值类型
    //闭包的参数和返回值类型可以通过类型推导省略
    //闭包可以通过move关键字来强制获取环境中的变量的所有权
    //闭包可以通过move关键字来强制获取环境中的变量的所有权
    //闭包可以通过move关键字来强制获取环境中的变量的所有权
    //闭包可以通过move关键字来强制获取环境中的变量的所有权
    //闭包可以通过move关键字来强制获取环境中的变量的所有权
    //闭包可以通过move关键字来强制获取环境中的变量的所有权
    //闭包可以通过move关键字来强制获取环境中的变量的所有权
    //闭包可以通过move关键字来强制获取环境中的变量的所有权
    //闭包可以通过move关键字来强制获取环境中的变量的所有权
    let x = 10; //定义一个变量x
    let add = |y| x + y; //定义一个闭包add，用来计算x+y
    let y = 20; //定义一个变量y
    println!("{}", add(y)); //打印add闭包的结果

    let mut z = 30; //定义一个可变变量z
    let add_z = move |y| z + y; //定义一个move闭包add_z，用来计算z+y
    z = 40; //修改变量z的值
    println!("{}", add_z(y)); //打印add_z闭包的结果
}