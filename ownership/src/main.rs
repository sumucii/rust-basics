fn main() {
    //所有权是Rust中的一个重要概念

    /**
    所有权规则：
    1. Rust中的每一个值都有一个被称为所有者（owner）的变量
    2. 同一时间只能有一个所有者
    3. 当所有者离开作用域时，值将被销毁
    4. 所有权规则有助于避免内存泄漏和数据竞争
    5. 所有权规则由编译器在编译时检查
    6. 所有权规则适用于堆上分配的值和栈上分配的值
    7. 所有权规则适用于函数参数和返回值
    8. 所有权规则适用于结构体、枚举和闭包
    9. 所有权规则适用于引用和生命周期
    10. 所有权规则适用于模块、包和库
    11. 所有权规则适用于并发编程
    12. 所有权规则适用于异步编程
    13. 所有权规则适用于内存安全和线程安全
    14. 所有权规则适用于代码可读性和可维护性
    15. 所有权规则适用于代码性能和可靠性
    16. 所有权规则适用于代码复用和测试
    17. 所有权规则适用于代码可移植性和跨平台性
    18. 所有权规则适用于代码可扩展性和可升级性
    **/

    //所有权规则示例：
    let s1 = String::from("Hello, Rust!"); //定义一个字符串变量s1
    let s2 = s1; //将s1的所有权转移给s2
    //println!("{}", s1); //编译错误：s1的所有权已经转移给s2
    println!("{}", s2); //打印s2的值

    let s3 = String::from("Hello, Rust!"); //定义一个字符串变量s3
    let s4 = s3.clone(); //克隆s3的值给s4
    println!("{}", s3); //打印s3的值
    println!("{}", s4); //打印s4的值

    let s5 = String::from("Hello, Rust!"); //定义一个字符串变量s5
    let s6 = &s5; //创建一个对s5的引用s6
    println!("{}", s5); //打印s5的值
    println!("{}", s6); //打印s6的值
}
